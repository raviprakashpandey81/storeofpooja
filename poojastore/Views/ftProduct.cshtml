@inherits Umbraco.Web.Mvc.UmbracoViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.FastTrack.Ui
@using Merchello.Web
@using Merchello.Web.Models
@using Merchello.Web.Models.Ui.Rendering
@using Merchello.Web.Models.VirtualContent
@using System.Text
@using Merchello.Core
@{
    //Layout = "FastTrack.cshtml";
    Layout = "_layoutInner.cshtml";
    // the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
    // However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
    // and the properties from the ContentType that was attached to the product in Merchello's back office.
    // These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue
    var merchello = new MerchelloHelper();
    var categories = merchello.Collections.Product.GetRootLevelCollections().FirstOrDefault();

   

    // Local variable for partial view conditionals
    var hasVariants = Model.ProductVariants.Any();

}

@*<div class="page-header">
    <h1>@Model.Name</h1>
    @Categories(Model)
</div>*@

<div class="agileinfo_single">
    <h5>@Model.Name</h5>
    <div class="col-md-4 agileinfo_single_left">
        @if (Model.HasValue("imageProduct"))
        {
            var mediaId = Model.GetPropertyValue<string>("imageProduct");
            var image = Umbraco.TypedMedia(mediaId);
           <img class="img-responsive" src="@image.GetCropUrl(height: 450)" alt="@Model.Name">
           
        }
        @*<img id="example" src="images/76.png" alt=" " class="img-responsive" />*@
    </div>
    <div class="col-md-8 agileinfo_single_right">
        <div class="rating1">
            <span class="starRating">
                <input id="rating5" type="radio" name="rating" value="5">
                <label for="rating5">5</label>
                <input id="rating4" type="radio" name="rating" value="4">
                <label for="rating4">4</label>
                <input id="rating3" type="radio" name="rating" value="3" checked>
                <label for="rating3">3</label>
                <input id="rating2" type="radio" name="rating" value="2">
                <label for="rating2">2</label>
                <input id="rating1" type="radio" name="rating" value="1">
                <label for="rating1">1</label>
            </span>
        </div>
          
          <div class="w3agile_description">
            <h4>Description :</h4>
            <p>
                @Html.Raw(Model.GetPropertyValue<string>("description"))
           </p>
        </div>
        <div class="snipcart-item block">
            <div class="snipcart-thumb agileinfo_single_right_snipcart">
                @*<h4>$21.00 <span>$25.00</span></h4>
                <h4>@Model.Price</h4>*@
                <div data-muivalue="product" data-muikey="@Model.Key">
                    @if (hasVariants)
                    {
                        // A container to populate the variant pricing via JavaScript
                        <h5 class="price @(Model.OnSale ? "price-onsale" : "") text-center variant-pricing " data-muivalue="variantprice"></h5>
                    }
                    else
                    {<h5 class="price text-center">@GetSingleProductPrice(Model)</h5>}

                </div>

            </div>
            <div class="snipcart-details agileinfo_single_right_details">
                @Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
                @*@Html.Raw(Model.GetPropertyValue<string>("brief"))*@
                @*<form action="#" method="post">
                    <fieldset>
                        <input type="hidden" name="cmd" value="_cart" />
                        <input type="hidden" name="add" value="1" />
                        <input type="hidden" name="business" value=" " />
                        <input type="hidden" name="item_name" value="pulao basmati rice" />
                        <input type="hidden" name="amount" value="21.00" />
                        <input type="hidden" name="discount_amount" value="1.00" />
                        <input type="hidden" name="currency_code" value="USD" />
                        <input type="hidden" name="return" value=" " />
                        <input type="hidden" name="cancel_return" value=" " />
                        <input type="submit" name="submit" value="Add to cart" class="button" />
                    </fieldset>
                </form>*@
            </div>
        </div>
    </div>
    <div class="clearfix"> </div>
</div>



    @helper Categories(IProductContent product)
    {
var collections = product.Collections().ToArray();
if (collections.Any())
{
    var pages = new List<Tuple<IProductCollection, IPublishedContent>>();
    foreach (var col in collections)
    {
        var page = ExampleUiHelper.Content.GetCategoryPageForCollection(col.Key);
        if (page != null)
        {
            pages.Add(new Tuple<IProductCollection, IPublishedContent>(col, page));
        }
    }
    var needsComma = false;
        <small>
            Categories:
            @foreach (var pc in pages)
            {
            @Umbraco.If(needsComma, ",") <a href="@pc.Item2.Url">@pc.Item1.Name</a>
                needsComma = true;
            }
        </small>
}
}

    @functions
{

        public static IHtmlString GetSingleProductPrice(IProductContent product)
        {
            var sb = new StringBuilder();
            if (product.OnSale)
            {
                sb.AppendFormat("<span class='sale-price'>{0}</span>", product.SalePrice.AsFormattedCurrency());
                sb.AppendFormat("<span class='original-price'>{0}</span>", product.Price.AsFormattedCurrency());
            }
            else
            {
                sb.AppendFormat("<span>{0}</span>", product.Price.AsFormattedCurrency());
            }

            return MvcHtmlString.Create(sb.ToString());
        }
    }
